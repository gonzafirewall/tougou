#!/usr/bin/env python

# (c) 2014, Gonzalo Martinez <gonzalo@deploshark.com.ar>

import argparse
import os
import ConfigParser
import sys

__author__ = "Gonzalo Martinez"
__copyright__ = "Deploshark"


class PluginImportError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

class PluginNotExists(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

class PluginConfigError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

def load_config_file():
    p = ConfigParser.ConfigParser()
    path1 = os.getcwd() + "/tougou.cfg"
    path2 = os.path.expanduser(os.environ.get('TOUGOU_CONFIG', "~/tougou.cfg"))
    path3 = "/etc/tougou/tougou.cfg"
    if os.path.exists(path1):
        p.read(path1)
    elif os.path.exists(path2):
        p.read(path2)
    elif os.path.exists(path3):
        p.read(path3)
    else:
        return None
    return p

def get_action(args, valids):
    for i in range(0,len(args)):
        arg = args[i]
        if arg in valids:
            del args[i]
            return arg
    return None

p = load_config_file()
VALID_MONITORINGS = [i.strip() for i in p.get('default', 'installed_apps').split(',')]

def load_config_monitoring(p, monitoring_tool):
    try:
        import importlib
        module = importlib.import_module('tougou.monitorings')
        klass = getattr(module, monitoring_tool.capitalize())
    except ImportError, AttributeError:
        raise PluginImportError('Not Exists module for %s' % monitoring_tool.upper())
    try:
        usr = p.get('monitoring', '%s_USER' % monitoring_tool)
        pwd = p.get('monitoring', '%s_PWD' % monitoring_tool)
    except ConfigParser.NoOptionError:
        usr = ''
        pwd = '' # TODO: mejorar el chequeo
    try:
        url = p.get('monitoring', '%s_URL' % monitoring_tool)
    except ConfigParser.NoOptionError:
        raise PluginConfigError('Plugin not correct configuration')
    inst_plug = klass(usr, pwd, url)
    return inst_plug

def build_option_parser(action):
    usage = "usage: %%prog [%s] [--help] [options] ..." % "|".join(VALID_MONITORINGS)
    parser = argparse.ArgumentParser('tougou')
    inst_plug = load_config_monitoring(p, action)
    inst_plug.cli_parser(parser)

class Cli(object):
    pass

def main():
    action = get_action(sys.argv, VALID_MONITORINGS)
    build_option_parser(action)
    #if action:
    #    action_commands = load_config_monitoring(p, action)


if __name__ == '__main__':
    main()
